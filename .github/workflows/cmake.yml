name: CMake

on:
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: DoozyX/clang-format-lint-action@v0.13
      with:
        source: 'common/ fft/ examples/'
        exclude: ''
        extensions: 'hpp,cpp'
        clangFormatVersion: 12

  build_nvidia:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    env:
      backends: OPENMP CUDA CUDA_HOST_DEVICE
      CUDA_ARCHITECTURES: AMPERE80
      CMAKE_CXX_COMPILER: /work/tpls/kokkos/bin/nvcc_wrapper
      container: nvidia_env

    steps:
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@v1.2.0
      with: { tool-cache: true, large-packages: false }

    - name: Checkout built branch
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Update submodules
      run: git submodule update --remote --recursive

    - name: Build docker
      run: docker build -t ${{ env.container }} docker/nvidia

    - name: Configure CMake for OpenMP backend
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
          docker run -v ${{github.workspace}}:/work ${{ env.container }} cmake -B build_OPENMP \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=g++ \
            -DCMAKE_CXX_STANDARD=17 -DKokkos_ENABLE_OPENMP=ON -DBUILD_TESTING=ON -DKokkosFFT_INTERNAL_Kokkos=ON

    - name: Configure CMake for CUDA backend
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
          docker run -v ${{github.workspace}}:/work ${{ env.container }} cmake -B build_CUDA \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=${{env.CMAKE_CXX_COMPILER}} \
            -DCMAKE_CXX_STANDARD=17 -DKokkos_ENABLE_CUDA=ON -DKokkos_ARCH_${{env.CUDA_ARCHITECTURES}}=ON -DBUILD_TESTING=ON -DKokkosFFT_INTERNAL_Kokkos=ON

    - name: Configure CMake for CUDA backend with HOST and DEVICE option
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
          docker run -v ${{github.workspace}}:/work ${{ env.container }} cmake -B build_CUDA_HOST_DEVICE \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=${{env.CMAKE_CXX_COMPILER}} \
            -DCMAKE_CXX_STANDARD=17 -DKokkos_ENABLE_CUDA=ON -DKokkos_ARCH_${{env.CUDA_ARCHITECTURES}}=ON -DBUILD_TESTING=ON \
            -DKokkosFFT_ENABLE_HOST_AND_DEVICE=ON -DKokkosFFT_INTERNAL_Kokkos=ON

    - name: Build
      # Build your program with the given configuration
      run: |
        for backend in ${{ env.backends }}; do
          docker run -v ${{github.workspace}}:/work ${{ env.container }} cmake --build build_${backend} --config ${{env.BUILD_TYPE}} -j 2
        done

    - name: Test for OpenMP backend
      # Execute tests defined by the CMake configuration. Testing on CPUs only
      run: |
        docker run -v ${{github.workspace}}:/work ${{ env.container }} ctest --output-on-failure --test-dir build_OPENMP -C ${{env.BUILD_TYPE}}

    - name: Install test for OpenMP backend
      run: |
        docker run -v ${{github.workspace}}:/work ${{ env.container }} ./install_test/bin/install_cpu.sh /tmp

    - name: Install test for CUDA backend
      run: |
        for backend in ${{ env.backends }}; do
          if [ ${backend} != "OPENMP" ]; then
            docker run -v ${{github.workspace}}:/work ${{ env.container }} ./install_test/bin/install_cuda.sh /tmp ${backend}
          fi
        done

  build_amd:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    env:
      #backends: HIP HIP_HOST_DEVICE
      architecture: VEGA90A
      CMAKE_CXX_COMPILER: hipcc
      container: amd_env

    strategy:
      matrix:
        backend: [ {name: HIP, option: ""}, {name: HIP_HOST_DEVICE, option: "-DKokkosFFT_ENABLE_HOST_AND_DEVICE=ON"} ]

    steps:
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@v1.2.0
      with: { tool-cache: true, large-packages: false }

    - name: Checkout built branch
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Update submodules
      run: git submodule update --remote --recursive

    - name: Build docker
      run: docker build -t ${{ env.container }} docker/amd

    - name: Configure CMake for HIP backend
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        docker run -v ${{github.workspace}}:/work ${{ env.container }} cmake -B build_${{matrix.backend.name}} \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=${{env.CMAKE_CXX_COMPILER}} \
            -DCMAKE_CXX_STANDARD=17 -DKokkos_ENABLE_HIP=ON -DKokkosFFT_INTERNAL_Kokkos=ON -DKokkos_ARCH_${{env.architecture}}=ON -DBUILD_TESTING=ON ${{matrix.backend.option}}

    - name: Build
      # Build your program with the given configuration
      run: |
        docker run -v ${{github.workspace}}:/work ${{ env.container }} cmake --build build_${{matrix.backend.name}} --config ${{env.BUILD_TYPE}} -j 2

    - name: Install test for HIP backend
      run: |
        docker run -v ${{github.workspace}}:/work ${{ env.container }} ./install_test/bin/install_hip.sh /tmp ${{matrix.backend.name}}

  build_intel:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    env:
      #architecture: INTEL_PVC
      architecture: AMPERE80
      #CMAKE_CXX_COMPILER: icpx
      CMAKE_CXX_COMPILER: /opt/intel/oneapi/compiler/latest/bin/compiler/clang++
      container: intel_env

    strategy:
      matrix:
        backend: [ {name: INTEL, option: ""}, {name: INTEL_HOST_DEVICE, option: "-DKokkosFFT_ENABLE_HOST_AND_DEVICE=ON"} ]

    steps:
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@v1.2.0
      with: { tool-cache: true, large-packages: false }

    - name: Checkout built branch
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Update submodules
      run: git submodule update --remote --recursive

    - name: Build docker
      run: docker build -t ${{ env.container }} docker/intel

    - name: Configure CMake for SYCL backend
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        docker run -v ${{github.workspace}}:/work ${{ env.container }} /bin/bash -c \
            ". /opt/intel/oneapi/setvars.sh --include-intel-llvm && cmake -B build_${{matrix.backend.name}} \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_COMPILER=${{env.CMAKE_CXX_COMPILER}} \
            -DCMAKE_CXX_STANDARD=17 \
            -DKokkosFFT_INTERNAL_Kokkos=ON \
            -DKOKKOS_IMPL_SYCL_DEVICE_GLOBAL_SUPPORTED=0 \
            -DKokkos_ARCH_NATIVE=ON \
            -DCMAKE_CXX_FLAGS="-fsycl-device-code-split=per_kernel -Wno-deprecated-declarations -Werror -Wno-gnu-zero-variadic-macro-arguments -Wno-unknown-cuda-version -Wno-sycl-target" \
            -DKokkos_ENABLE_SYCL=ON \
            -DKokkos_ENABLE_COMPILER_WARNINGS=ON \
            -DKokkos_ENABLE_DEPRECATED_CODE_4=OFF \
            -DKokkos_ENABLE_DEPRECATION_WARNINGS=OFF \
            -DKokkos_ENABLE_UNSUPPORTED_ARCHS=ON \
            -DKokkos_ARCH_${{env.architecture}}=ON \
            -DBUILD_TESTING=ON ${{matrix.backend.option}}"

    - name: Build
      # Build your program with the given configuration
      run: |
        docker run -v ${{github.workspace}}:/work ${{ env.container }} /bin/bash -c ". /opt/intel/oneapi/setvars.sh --include-intel-llvm && cmake --build build_${{matrix.backend.name}} --config ${{env.BUILD_TYPE}} -j 2"